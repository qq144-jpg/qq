import telebot
import sqlite3
import random
import string
import threading
from datetime import datetime, timedelta
from telebot.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

TOKEN = '7600627967:AAHJmBLKO51uDxouKMG8vBi0iOizbAJungA'
bot = telebot.TeleBot(TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('fire_safety.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
cursor.execute('''
CREATE TABLE IF NOT EXISTS inspections (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    date TEXT,
    address TEXT,
    responsible_person TEXT,
    inspector TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    access_code TEXT,
    code_expiry TEXT
)
''')
conn.commit()

def generate_secret_code():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø–∞"""
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))

def remove_expired_code(user_id):
    try:
        cursor.execute("SELECT code_expiry FROM users WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        if result:
            try:
                expiry_time = datetime.strptime(result[0], "%Y-%m-%d %H:%M:%S")
            except ValueError:
                return  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã

            if datetime.now() >= expiry_time:
                cursor.execute("DELETE FROM users WHERE user_id = ?", (user_id,))
                conn.commit()
                bot.send_message(user_id, "‚è≥ –í—Ä–µ–º—è –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except:
        bot.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@bot.message_handler(commands=['start'])
def start(message: Message):
    try:
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        user_id = message.chat.id
        cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        user = cursor.fetchone()

        if user:
            main_menu(message)
        else:
            secret_code = generate_secret_code()
            print(secret_code)
            expiry_time = (datetime.now() + timedelta(minutes=5)).strftime("%Y-%m-%d %H:%M:%S")
            cursor.execute("INSERT INTO users (user_id, access_code, code_expiry) VALUES (?, ?, ?)",
                           (user_id, secret_code, expiry_time))
            conn.commit()

            bot.send_message(user_id, f"üîë –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞:")
            bot.register_next_step_handler(message, check_access_code)

            # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–¥–∞
            threading.Timer(300, remove_expired_code, args=[user_id]).start()
    except:
        bot.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

def check_access_code(message: Message):
    try:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞"""
        user_id = message.chat.id
        cursor.execute("SELECT access_code FROM users WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()

        if result and message.text == result[0]:
            bot.send_message(user_id, "‚úÖ –ö–æ–¥ –≤–µ—Ä–Ω—ã–π! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
            main_menu(message)
        else:
            bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            bot.register_next_step_handler(message, check_access_code)
    except:
        bot.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

def main_menu(message: Message):
    try:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        btn_edit = KeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫")
        btn_view = KeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏")
        markup.add(btn_edit, btn_view)
        bot.send_message(message.chat.id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=markup)
    except:
        bot.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@bot.message_handler(func=lambda message: message.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫")
def edit_menu(message: Message):
    try:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        btn_add = KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É")
        btn_edit = KeyboardButton("‚úè –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É")
        btn_delete = KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É")
        btn_menu = KeyboardButton("–í –º–µ–Ω—é")
        markup.add(btn_add, btn_edit, btn_delete, btn_menu)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    except:
        btn = KeyboardButton("–í –º–µ–Ω—é")
        markup.add(btn)
        bot.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "‚úè –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É")
def edit_inspection(message: Message):
    try:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        bot.register_next_step_handler(message, get_edit_id)
    except:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        btn = KeyboardButton("–í –º–µ–Ω—é")
        markup.add(btn)
        bot.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=markup)
def get_edit_id(message: Message):
    try:
        inspection_id = int(message.text)
        cursor.execute("SELECT * FROM inspections WHERE id = ?", (inspection_id,))
        record = cursor.fetchone()
        if record:
            bot.send_message(message.chat.id, f"–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:\n\nid –ø—Ä–æ–≤–µ—Ä–∫–∏: {record[0]}\nüìÖ –î–∞—Ç–∞: {record[1]}\nüè¢ –ê–¥—Ä–µ—Å: {record[2]}\nüë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {record[3]}\nüîç –ü—Ä–æ–≤–µ—Ä—è—é—â–∏–π: {record[4]}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å (–∏–ª–∏ - –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
            bot.register_next_step_handler(message, lambda msg: edit_address(msg, inspection_id, record))
        else:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    except ValueError:
        bot.send_message(message.chat.id, "‚ö† –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID!")

def edit_address(message: Message, inspection_id, old_data):
    try:
        new_address = message.text if message.text != "-" else old_data[2]
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ (–∏–ª–∏ - –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
        bot.register_next_step_handler(message, lambda msg: edit_responsible(msg, inspection_id, new_address, old_data))
    except:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        btn = KeyboardButton("–í –º–µ–Ω—é")
        markup.add(btn)
        bot.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=markup)

def edit_responsible(message: Message, inspection_id, new_address, old_data):
    try:
        new_responsible = message.text if message.text != "-" else old_data[3]
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û –ø—Ä–æ–≤–µ—Ä—è—é—â–µ–≥–æ (–∏–ª–∏ - –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
        bot.register_next_step_handler(message, lambda msg: save_edit(msg, inspection_id, new_address, new_responsible, old_data))
    except:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        btn = KeyboardButton("–í –º–µ–Ω—é")
        markup.add(btn)
        bot.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=markup)
def save_edit(message: Message, inspection_id, new_address, new_responsible, old_data):
    try:
        new_inspector = message.text if message.text != "-" else old_data[4]
        cursor.execute("UPDATE inspections SET address = ?, responsible_person = ?, inspector = ? WHERE id = ?", (new_address, new_responsible, new_inspector, inspection_id))
        conn.commit()
        bot.send_message(message.chat.id, "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    except:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        btn = KeyboardButton("–í –º–µ–Ω—é")
        markup.add(btn)
        bot.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É")
def delete_inspection(message: Message):
    try:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        bot.register_next_step_handler(message, confirm_delete)
    except:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        btn = KeyboardButton("–í –º–µ–Ω—é")
        markup.add(btn)
        bot.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=markup)

def confirm_delete(message: Message):
    try:
        inspection_id = int(message.text)
        cursor.execute("DELETE FROM inspections WHERE id = ?", (inspection_id,))
        conn.commit()
        bot.send_message(message.chat.id, "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")
    except ValueError:
        bot.send_message(message.chat.id, "‚ö† –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID!")

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
temp_inspections = {}

@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É")
def start_inspection(message: Message):
    try:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        bot.register_next_step_handler(message, get_address)
    except:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        btn = KeyboardButton("–í –º–µ–Ω—é")
        markup.add(btn)
        bot.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=markup)

def get_address(message: Message):
    try:
        address = message.text.strip()
        today_date = datetime.today().strftime('%Y-%m-%d')  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–≤–∏–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ª–∏—Ü–∞:")
        bot.register_next_step_handler(message, get_responsible_person, today_date, address)
    except:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        btn = KeyboardButton("–í –º–µ–Ω—é")
        markup.add(btn)
        bot.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=markup)

def validate_full_name(full_name: str) -> bool:
    return len(full_name.split()) == 3  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —Ä–æ–≤–Ω–æ —Ç—Ä–∏ —Å–ª–æ–≤–∞

def get_responsible_person(message: Message, date, address):
    try:
        responsible_person = message.text.strip()
        if not validate_full_name(responsible_person):
            bot.send_message(message.chat.id, "‚ö† –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):")
            bot.register_next_step_handler(message, get_responsible_person, date, address)
            return

        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–æ–≤–µ—Ä—è—é—â–µ–≥–æ:")
        bot.register_next_step_handler(message, get_inspector, date, address, responsible_person)
    except:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        btn = KeyboardButton("–í –º–µ–Ω—é")
        markup.add(btn)
        bot.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=markup)
def get_inspector(message: Message, date, address, responsible_person):
    try:
        inspector = message.text.strip()
        if not validate_full_name(inspector):
            bot.send_message(message.chat.id, "‚ö† –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û –ø—Ä–æ–≤–µ—Ä—è—é—â–µ–≥–æ (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):")
            bot.register_next_step_handler(message, get_inspector, date, address, responsible_person)
            return

        confirm_inspection(message, date, address, responsible_person, inspector)
    except:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        btn = KeyboardButton("–í –º–µ–Ω—é")
        markup.add(btn)
        bot.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=markup)
def confirm_inspection(message: Message, date, address, responsible_person, inspector):
    try:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        chat_id = message.chat.id
        temp_inspections[chat_id] = {
            "date": date,
            "address": address,
            "responsible_person": responsible_person,
            "inspector": inspector
        }

        markup = InlineKeyboardMarkup()
        btn_confirm = InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")
        btn_edit = InlineKeyboardButton("‚úè –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit")
        markup.add(btn_confirm, btn_edit)

        bot.send_message(
            chat_id,
            f"üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º:\n\n"
            f"üìÖ –î–∞—Ç–∞: {date}\n"
            f"üè¢ –ê–¥—Ä–µ—Å: {address}\n"
            f"üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {responsible_person}\n"
            f"üîç –ü—Ä–æ–≤–µ—Ä—è—é—â–∏–π: {inspector}",
            reply_markup=markup
        )
    except:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        btn = KeyboardButton("–í –º–µ–Ω—é")
        markup.add(btn)
        bot.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "confirm")
def save_inspection(call):
    try:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        chat_id = call.message.chat.id
        if chat_id not in temp_inspections:
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return

        data = temp_inspections.pop(chat_id)

        cursor.execute(
            "INSERT INTO inspections (date, address, responsible_person, inspector) VALUES (?, ?, ?, ?)",
            (data["date"], data["address"], data["responsible_person"], data["inspector"])
        )
        conn.commit()

        bot.send_message(chat_id, "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", main_menu(call.message))
    except:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        btn = KeyboardButton("–í –º–µ–Ω—é")
        markup.add(btn)
        bot.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "edit")
def edit_inspection(call):
    try:
        """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–Ω–æ–≤–æ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ"""
        chat_id = call.message.chat.id
        bot.send_message(chat_id, "‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        bot.register_next_step_handler(call.message, get_address)
    except:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        btn = KeyboardButton("–í –º–µ–Ω—é")
        markup.add(btn)
        bot.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–í –º–µ–Ω—é")
def return_to_menu(message: Message):
    bot.send_message(message.chat.id, "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é...", reply_markup=main_menu(message))

@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏")
def choose_search_method(message: Message):
    try:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        btn_all = KeyboardButton("üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ")
        btn_date = KeyboardButton("üìÖ –ü–æ –¥–∞—Ç–µ")
        btn_address = KeyboardButton("üè¢ –ü–æ –∞–¥—Ä–µ—Å—É")
        btn_name = KeyboardButton("üë§ –ü–æ –§–ò–û")
        btn_menu = KeyboardButton("–í –º–µ–Ω—é")
        markup.add(btn_all, btn_date, btn_address, btn_name, btn_menu)
        bot.send_message(message.chat.id, "–ö–∞–∫ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É?", reply_markup=markup)
    except:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        btn = KeyboardButton("–í –º–µ–Ω—é")
        markup.add(btn)
        bot.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=markup)
def paginate_records(records, page):
    per_page = 10
    start = page * per_page
    end = start + per_page
    return records[start:end], len(records) > end

@bot.message_handler(func=lambda message: message.text == "üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ")
def show_all_inspections(message: Message, page=0):
    try:
        cursor.execute("SELECT * FROM inspections")
        records = cursor.fetchall()

        if not records:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        show_search_results(message, records, "all", page)
    except:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        btn = KeyboardButton("–í –º–µ–Ω—é")
        markup.add(btn)
        bot.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üìÖ –ü–æ –¥–∞—Ç–µ")
def search_by_date(message: Message):
    try:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–ì–ì–ì–ì-–ú–ú-–î–î):")
        bot.register_next_step_handler(message, lambda msg: search_records(msg, "date", msg.text, "date"))
    except:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        btn = KeyboardButton("–í –º–µ–Ω—é")
        markup.add(btn)
        bot.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üè¢ –ü–æ –∞–¥—Ä–µ—Å—É")
def search_by_address(message: Message):
    try:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:")
        bot.register_next_step_handler(message, lambda msg: search_records(msg, "address", msg.text, "address"))
    except:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        btn = KeyboardButton("–í –º–µ–Ω—é")
        markup.add(btn)
        bot.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üë§ –ü–æ –§–ò–û")
def search_by_responsible(message: Message):
    try:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ:")
        bot.register_next_step_handler(message, lambda msg: search_records(msg, "responsible_person", msg.text, "name"))
    except:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        btn = KeyboardButton("–í –º–µ–Ω—é")
        markup.add(btn)
        bot.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=markup)
def search_records(message, column, value, search_type, page=0):
    try:
        cursor.execute(f"SELECT * FROM inspections WHERE {column} LIKE ?", (f"%{value}%",))
        records = cursor.fetchall()
        if not records:
            bot.send_message(message.chat.id, "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        show_search_results(message, records, search_type, page)
    except:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        btn = KeyboardButton("–í –º–µ–Ω—é")
        markup.add(btn)
        bot.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=markup)

def show_search_results(message, records, search_type, page=0):
    try:
        paginated_records, has_next = paginate_records(records, page)
        response = "üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:\n\n"
        for i, row in enumerate(paginated_records, start=1 + page * 10):
            response += f"{i}.\nid –ø—Ä–æ–≤–µ—Ä–∫–∏: {row[0]}\nüìÖ {row[1]}\nüè¢ {row[2]}\nüë§ {row[3]}\nüîç {row[4]}\n\n"

        markup = InlineKeyboardMarkup()
        if page > 0:
            markup.add(InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"page_search_{search_type}_{page - 1}"))
        if has_next:
            markup.add(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°", callback_data=f"page_search_{search_type}_{page + 1}"))

        bot.send_message(message.chat.id, response, reply_markup=markup)
    except:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        btn = KeyboardButton("–í –º–µ–Ω—é")
        markup.add(btn)
        bot.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("page_search_"))
def change_page_search(call):
    try:
        _, search_type, page = call.data.split("_")
        page = int(page)
        bot.delete_message(call.message.chat.id, call.message.message_id)
        search_records(call.message, "date" if search_type == "date" else "address" if search_type == "address" else "responsible_person", call.message.text, search_type, page)
    except:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        btn = KeyboardButton("–í –º–µ–Ω—é")
        markup.add(btn)
        bot.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", reply_markup=markup)

if __name__ == '__main__':
    bot.polling(none_stop=True)
