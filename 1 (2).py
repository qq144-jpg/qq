import telebot
import sqlite3
from datetime import datetime
import random
import string
from telebot.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

TOKEN = '7600627967:AAHJmBLKO51uDxouKMG8vBi0iOizbAJungA'
bot = telebot.TeleBot(TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('fire_safety.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
cursor.execute('''
CREATE TABLE IF NOT EXISTS inspections (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    date TEXT,
    address TEXT,
    responsible_person TEXT,
    inspector TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    access_code TEXT
)
''')
conn.commit()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ (–µ–≥–æ –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å)
SECRET_CODE = "GOLD345"

@bot.message_handler(commands=['start'])
def start(message: Message):
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    user_id = message.chat.id
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()

    if user:
        main_menu(message)
    else:
        bot.send_message(user_id, "üîë –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞:")
        bot.register_next_step_handler(message, check_access_code)

def check_access_code(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞"""
    user_id = message.chat.id
    if message.text == SECRET_CODE:
        cursor.execute("INSERT INTO users (user_id, access_code) VALUES (?, ?)", (user_id, SECRET_CODE))
        conn.commit()
        bot.send_message(user_id, "‚úÖ –ö–æ–¥ –≤–µ—Ä–Ω—ã–π! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
        main_menu(message)
    else:
        bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, check_access_code)

def main_menu(message: Message):
    """–í—ã–≤–æ–¥ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    btn_add = KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É")
    btn_view = KeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏")
    markup.add(btn_add, btn_view)
    bot.send_message(message.chat.id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
temp_inspections = {}

@bot.message_handler(func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É")
def start_inspection(message: Message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    bot.register_next_step_handler(message, get_address)


def get_address(message: Message):
    address = message.text.strip()
    today_date = datetime.today().strftime('%Y-%m-%d')  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–≤–∏–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ª–∏—Ü–∞:")
    bot.register_next_step_handler(message, get_responsible_person, today_date, address)


def validate_full_name(full_name: str) -> bool:
    return len(full_name.split()) == 3  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —Ä–æ–≤–Ω–æ —Ç—Ä–∏ —Å–ª–æ–≤–∞


def get_responsible_person(message: Message, date, address):
    responsible_person = message.text.strip()
    if not validate_full_name(responsible_person):
        bot.send_message(message.chat.id, "‚ö† –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):")
        bot.register_next_step_handler(message, get_responsible_person, date, address)
        return

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–æ–≤–µ—Ä—è—é—â–µ–≥–æ:")
    bot.register_next_step_handler(message, get_inspector, date, address, responsible_person)


def get_inspector(message: Message, date, address, responsible_person):
    inspector = message.text.strip()
    if not validate_full_name(inspector):
        bot.send_message(message.chat.id, "‚ö† –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û –ø—Ä–æ–≤–µ—Ä—è—é—â–µ–≥–æ (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):")
        bot.register_next_step_handler(message, get_inspector, date, address, responsible_person)
        return

    confirm_inspection(message, date, address, responsible_person, inspector)


def confirm_inspection(message: Message, date, address, responsible_person, inspector):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    chat_id = message.chat.id
    temp_inspections[chat_id] = {
        "date": date,
        "address": address,
        "responsible_person": responsible_person,
        "inspector": inspector
    }

    markup = InlineKeyboardMarkup()
    btn_confirm = InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")
    btn_edit = InlineKeyboardButton("‚úè –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit")
    markup.add(btn_confirm, btn_edit)

    bot.send_message(
        chat_id,
        f"üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º:\n\n"
        f"üìÖ –î–∞—Ç–∞: {date}\n"
        f"üè¢ –ê–¥—Ä–µ—Å: {address}\n"
        f"üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {responsible_person}\n"
        f"üîç –ü—Ä–æ–≤–µ—Ä—è—é—â–∏–π: {inspector}",
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data == "confirm")
def save_inspection(call):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    chat_id = call.message.chat.id
    if chat_id not in temp_inspections:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    data = temp_inspections.pop(chat_id)

    cursor.execute(
        "INSERT INTO inspections (date, address, responsible_person, inspector) VALUES (?, ?, ?, ?)",
        (data["date"], data["address"], data["responsible_person"], data["inspector"])
    )
    conn.commit()

    bot.send_message(chat_id, "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", reply_markup=main_menu(call.message))


@bot.callback_query_handler(func=lambda call: call.data == "edit")
def edit_inspection(call):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–Ω–æ–≤–æ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ"""
    chat_id = call.message.chat.id
    bot.send_message(chat_id, "‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    bot.register_next_step_handler(call.message, get_address)


@bot.message_handler(func=lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
def return_to_menu(message: Message):
    bot.send_message(message.chat.id, "üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é...", reply_markup=main_menu(message))


@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏")
def choose_search_method(message: Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    btn_all = KeyboardButton("üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ")
    btn_date = KeyboardButton("üìÖ –ü–æ –¥–∞—Ç–µ")
    btn_address = KeyboardButton("üè¢ –ü–æ –∞–¥—Ä–µ—Å—É")
    btn_name = KeyboardButton("üë§ –ü–æ –§–ò–û")
    btn_menu = KeyboardButton("üîô –í –º–µ–Ω—é")
    markup.add(btn_all, btn_date, btn_address, btn_name, btn_menu)
    bot.send_message(message.chat.id, "–ö–∞–∫ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É?", reply_markup=markup)

def paginate_records(records, page):
    per_page = 10
    start = page * per_page
    end = start + per_page
    return records[start:end], len(records) > end

@bot.message_handler(func=lambda message: message.text == "üîç –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ")
def show_all_inspections(message: Message, page=0):
    cursor.execute("SELECT * FROM inspections")
    records = cursor.fetchall()

    if not records:
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    paginated_records, has_next = paginate_records(records, page)
    response = "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫:\n\n"
    for i, row in enumerate(paginated_records, start=1 + page * 10):
        response += f"{i}. üìÖ {row[1]}\nüè¢ {row[2]}\nüë§ {row[3]}\nüîç {row[4]}\n\n"

    markup = InlineKeyboardMarkup()
    if page > 0:
        markup.add(InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"page_all_{page - 1}"))
    if has_next:
        markup.add(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°", callback_data=f"page_all_{page + 1}"))

    bot.send_message(message.chat.id, response, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("page_all_"))
def change_page_all(call):
    page = int(call.data.split("_")[2])
    bot.delete_message(call.message.chat.id, call.message.message_id)
    show_all_inspections(call.message, page)

def search_records(message, column, value, search_type):
    cursor.execute(f"SELECT * FROM inspections WHERE {column} LIKE ?", (f"%{value}%",))
    records = cursor.fetchall()
    if not records:
        bot.send_message(message.chat.id, "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    show_search_results(message, records, search_type)

def show_search_results(message, records, search_type, page=0):
    paginated_records, has_next = paginate_records(records, page)
    response = "üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:\n\n"
    for i, row in enumerate(paginated_records, start=1 + page * 10):
        response += f"{i}. üìÖ {row[1]}\nüè¢ {row[2]}\nüë§ {row[3]}\nüîç {row[4]}\n\n"

    markup = InlineKeyboardMarkup()
    if page > 0:
        markup.add(InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"page_search_{search_type}_{page - 1}"))
    if has_next:
        markup.add(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°", callback_data=f"page_search_{search_type}_{page + 1}"))

    bot.send_message(message.chat.id, response, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("page_search_"))
def change_page_search(call):
    _, search_type, page = call.data.split("_")
    page = int(page)
    bot.delete_message(call.message.chat.id, call.message.message_id)
    search_records(call.message, "date" if search_type == "date" else "address" if search_type == "address" else "responsible_person", "", search_type)

if __name__ == '__main__':
    bot.polling(none_stop=True)
